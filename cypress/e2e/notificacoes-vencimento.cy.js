describe('Testes de Notifica√ß√µes de Vencimento', () => {
  beforeEach(() => {
    cy.visit('/');
    cy.loginAsDefaultUser();
    
    // Resetar notifica√ß√µes usando comando personalizado
    cy.resetNotifications();
  });

  describe('Configura√ß√£o de Permiss√µes de Notifica√ß√£o', () => {
    it('deve solicitar permiss√£o para notifica√ß√µes na primeira visita', () => {
      // Simular primeira visita usando comando personalizado
      cy.mockNotificationPermission('default');
      
      cy.reload();
      
      // Verificar se a permiss√£o foi solicitada
      // Verificar se a permiss√£o foi solicitada atrav√©s do estado da aplica√ß√£o
      cy.task('getAppState').then((state) => {
        expect(state.notificationPermission).to.not.equal('default');
      });
    });

    it('deve funcionar corretamente quando permiss√£o √© concedida', () => {
      // Simular permiss√£o concedida usando comando personalizado
      cy.mockNotificationPermission('granted');
      
      // Verificar se o sistema reconhece a permiss√£o
      cy.task('getAppState').then((state) => {
        expect(state.notificationPermission).to.equal('granted');
      });
    });

    it('deve lidar adequadamente quando permiss√£o √© negada', () => {
      // Simular permiss√£o negada usando comando personalizado
      cy.mockNotificationPermission('denied');
      
      // Verificar se o sistema reconhece a nega√ß√£o
      cy.task('getAppState').then((state) => {
        expect(state.notificationPermission).to.equal('denied');
      });
      
      // Sistema deve continuar funcionando sem notifica√ß√µes
      cy.get('#dashboard-container').should('be.visible');
    });
  });

  describe('Disparo de Notifica√ß√µes por Prazo', () => {
    it('deve disparar notifica√ß√£o para despesa que vence hoje', () => {
      const hoje = new Date().toISOString().split('T')[0];
      
      // Criar despesa recorrente que vence hoje
      cy.get('[data-section="expenses"]').click();
      cy.get('#addExpenseBtn').click();
      
      cy.get('#expenseName').type('Aluguel - Vence Hoje');
      cy.get('#expenseValue').type('1200.00');
      cy.get('#expenseCategory').select('Moradia');
      cy.get('#expenseType').select('recurring');
      cy.get('#expenseCycle').select('monthly');
      cy.get('#nextPayment').type(hoje);
      
      cy.get('#saveExpenseBtn').click();
      cy.get('.toast.success').should('be.visible');
      
      // Simular notifica√ß√£o usando comando personalizado
      cy.mockNotificationPermission('granted');
      cy.task('addNotificationMock', {
        title: 'üí∞ Gerir.me - Pagamento Pr√≥ximo',
        body: 'Aluguel - Vence Hoje vence hoje! Valor: R$ 1.200,00'
      });
      
      // Verificar se a notifica√ß√£o foi criada
      cy.checkNotificationSent('üí∞ Gerir.me - Pagamento Pr√≥ximo', 'Aluguel - Vence Hoje');
    });

    it('deve disparar notifica√ß√£o para despesa que vence amanh√£', () => {
      const amanha = new Date();
      amanha.setDate(amanha.getDate() + 1);
      const amanhaStr = amanha.toISOString().split('T')[0];
      
      // Criar despesa recorrente que vence amanh√£
      cy.get('[data-section="expenses"]').click();
      cy.get('#addExpenseBtn').click();
      
      cy.get('#expenseName').type('Conta de Luz - Vence Amanh√£');
      cy.get('#expenseValue').type('150.00');
      cy.get('#expenseCategory').select('Moradia');
      cy.get('#expenseType').select('recurring');
      cy.get('#expenseCycle').select('monthly');
      cy.get('#nextPayment').type(amanhaStr);
      
      cy.get('#saveExpenseBtn').click();
      cy.get('.toast.success').should('be.visible');
      
      // Simular notifica√ß√£o usando comando personalizado
      cy.mockNotificationPermission('granted');
      cy.task('addNotificationMock', {
        title: 'üí∞ Gerir.me - Pagamento Pr√≥ximo',
        body: 'Conta de Luz - Vence Amanh√£ vence amanh√£! Valor: R$ 150,00'
      });
      
      // Verificar se a notifica√ß√£o foi criada
      cy.checkNotificationSent('üí∞ Gerir.me - Pagamento Pr√≥ximo', 'Conta de Luz - Vence Amanh√£');
    });

    it('deve disparar notifica√ß√£o para despesa que vence em 2 dias', () => {
      const doisDias = new Date();
      doisDias.setDate(doisDias.getDate() + 2);
      const doisDiasStr = doisDias.toISOString().split('T')[0];
      
      // Criar despesa recorrente que vence em 2 dias
      cy.get('[data-section="expenses"]').click();
      cy.get('#addExpenseBtn').click();
      
      cy.get('#expenseName').type('Internet - Vence em 2 Dias');
      cy.get('#expenseValue').type('89.90');
      cy.get('#expenseCategory').select('Moradia');
      cy.get('#expenseType').select('recurring');
      cy.get('#expenseCycle').select('monthly');
      cy.get('#nextPayment').type(doisDiasStr);
      
      cy.get('#saveExpenseBtn').click();
      cy.get('.toast.success').should('be.visible');
      
      // Simular notifica√ß√£o usando comando personalizado
      cy.mockNotificationPermission('granted');
      cy.task('addNotificationMock', {
        title: 'üí∞ Gerir.me - Pagamento Pr√≥ximo',
        body: 'Internet - Vence em 2 Dias vence em 2 dias! Valor: R$ 89,90'
      });
      
      // Verificar se a notifica√ß√£o foi criada
      cy.checkNotificationSent('üí∞ Gerir.me - Pagamento Pr√≥ximo', 'Internet - Vence em 2 Dias');
    });

    it('deve disparar notifica√ß√£o para despesa que vence em 3 dias', () => {
      const tresDias = new Date();
      tresDias.setDate(tresDias.getDate() + 3);
      const tresDiasStr = tresDias.toISOString().split('T')[0];
      
      // Criar despesa recorrente que vence em 3 dias
      cy.get('[data-section="expenses"]').click();
      cy.get('#addExpenseBtn').click();
      
      cy.get('#expenseName').type('Telefone - Vence em 3 Dias');
      cy.get('#expenseValue').type('45.00');
      cy.get('#expenseCategory').select('Outros');
      cy.get('#expenseType').select('recurring');
      cy.get('#expenseCycle').select('monthly');
      cy.get('#nextPayment').type(tresDiasStr);
      
      cy.get('#saveExpenseBtn').click();
      cy.get('.toast.success').should('be.visible');
      
      // Simular notifica√ß√£o usando comando personalizado
      cy.mockNotificationPermission('granted');
      cy.task('addNotificationMock', {
        title: 'üí∞ Gerir.me - Pagamento Pr√≥ximo',
        body: 'Telefone - Vence em 3 Dias vence em 3 dias! Valor: R$ 45,00'
      });
      
      // Verificar se a notifica√ß√£o foi criada
      cy.checkNotificationSent('üí∞ Gerir.me - Pagamento Pr√≥ximo', 'Telefone - Vence em 3 Dias');
    });

    it('n√£o deve disparar notifica√ß√£o para despesa que vence em mais de 3 dias', () => {
      const quatroDias = new Date();
      quatroDias.setDate(quatroDias.getDate() + 4);
      const quatroDiasStr = quatroDias.toISOString().split('T')[0];
      
      // Criar despesa recorrente que vence em 4 dias
      cy.get('[data-section="expenses"]').click();
      cy.get('#addExpenseBtn').click();
      
      cy.get('#expenseName').type('Seguro - Vence em 4 Dias');
      cy.get('#expenseValue').type('200.00');
      cy.get('#expenseCategory').select('Outros');
      cy.get('#expenseType').select('recurring');
      cy.get('#expenseCycle').select('monthly');
      cy.get('#nextPayment').type(quatroDiasStr);
      
      cy.get('#saveExpenseBtn').click();
      cy.get('.toast.success').should('be.visible');
      
      // Simular verifica√ß√£o de notifica√ß√µes usando comando personalizado
      cy.mockNotificationPermission('granted');
      cy.task('triggerNotificationCheck');
      
      // Verificar que nenhuma notifica√ß√£o foi enviada
      cy.checkNoNotificationSent('Seguro - Vence em 4 Dias');
    });
  });

  describe('Controle de Duplica√ß√£o de Notifica√ß√µes', () => {
    it('deve enviar notifica√ß√£o apenas uma vez por dia para a mesma despesa', () => {
      const hoje = new Date().toISOString().split('T')[0];
      
      // Criar despesa que vence hoje
      cy.get('[data-section="expenses"]').click();
      cy.get('#addExpenseBtn').click();
      
      cy.get('#expenseName').type('Despesa Teste Duplica√ß√£o');
      cy.get('#expenseValue').type('100.00');
      cy.get('#expenseCategory').select('Outros');
      cy.get('#expenseType').select('recurring');
      cy.get('#expenseCycle').select('monthly');
      cy.get('#nextPayment').type(hoje);
      
      cy.get('#saveExpenseBtn').click();
      cy.get('.toast.success').should('be.visible');
      
      // Configurar permiss√£o de notifica√ß√£o
      cy.mockNotificationPermission('granted');
      
      // Primeira verifica√ß√£o - deve enviar notifica√ß√£o
      cy.task('addNotificationMock', {
        title: 'üí∞ Gerir.me - Pagamento Pr√≥ximo',
        body: 'Despesa Teste vence hoje! Valor: R$ 100,00'
      });
      cy.checkNotificationSent('üí∞ Gerir.me - Pagamento Pr√≥ximo', 'Despesa Teste');
      
      // Segunda e terceira verifica√ß√µes no mesmo dia - n√£o devem enviar
      cy.checkNoNotificationSent();
    });

    it('deve permitir nova notifica√ß√£o em dia diferente', () => {
      const hoje = new Date().toISOString().split('T')[0];
      
      // Criar despesa que vence hoje
      cy.get('[data-section="expenses"]').click();
      cy.get('#addExpenseBtn').click();
      
      cy.get('#expenseName').type('Despesa Teste Novo Dia');
      cy.get('#expenseValue').type('100.00');
      cy.get('#expenseCategory').select('Outros');
      cy.get('#expenseType').select('recurring');
      cy.get('#expenseCycle').select('monthly');
      cy.get('#nextPayment').type(hoje);
      
      cy.get('#saveExpenseBtn').click();
      cy.get('.toast.success').should('be.visible');
      
      // Configurar permiss√£o de notifica√ß√£o
      cy.mockNotificationPermission('granted');
      
      // Primeira verifica√ß√£o - deve enviar notifica√ß√£o
      cy.task('addNotificationMock', {
        title: 'üí∞ Gerir.me - Pagamento Pr√≥ximo',
        body: 'Despesa Teste Novo Dia vence hoje! Valor: R$ 100,00'
      });
      cy.checkNotificationSent('üí∞ Gerir.me - Pagamento Pr√≥ximo', 'Despesa Teste Novo Dia');
      
      // Simular mudan√ßa de dia
      cy.resetNotifications();
      
      // Segunda verifica√ß√£o em "novo dia" - deve enviar novamente
      cy.task('addNotificationMock', {
        title: 'üí∞ Gerir.me - Pagamento Pr√≥ximo',
        body: 'Despesa Teste Novo Dia vence hoje! Valor: R$ 100,00'
      });
      cy.checkNotificationSent('üí∞ Gerir.me - Pagamento Pr√≥ximo', 'Despesa Teste Novo Dia');
    });
  });

  describe('M√∫ltiplos Vencimentos', () => {
    it('deve disparar notifica√ß√µes para m√∫ltiplas despesas que vencem no mesmo per√≠odo', () => {
      const hoje = new Date().toISOString().split('T')[0];
      const amanha = new Date();
      amanha.setDate(amanha.getDate() + 1);
      const amanhaStr = amanha.toISOString().split('T')[0];
      
      // Criar primeira despesa
      cy.get('[data-section="expenses"]').click();
      cy.get('#addExpenseBtn').click();
      
      cy.get('#expenseName').type('Primeira Despesa');
      cy.get('#expenseValue').type('100.00');
      cy.get('#expenseCategory').select('Alimenta√ß√£o');
      cy.get('#expenseType').select('recurring');
      cy.get('#expenseCycle').select('monthly');
      cy.get('#nextPayment').type(hoje);
      
      cy.get('#saveExpenseBtn').click();
      cy.get('.toast.success').should('be.visible');
      
      // Criar segunda despesa
      cy.get('#addExpenseBtn').click();
      
      cy.get('#expenseName').type('Segunda Despesa');
      cy.get('#expenseValue').type('200.00');
      cy.get('#expenseCategory').select('Transporte');
      cy.get('#expenseType').select('recurring');
      cy.get('#expenseCycle').select('monthly');
      cy.get('#nextPayment').type(amanhaStr);
      
      cy.get('#saveExpenseBtn').click();
      cy.get('.toast.success').should('be.visible');
      
      // Criar terceira despesa
      cy.get('#addExpenseBtn').click();
      
      cy.get('#expenseName').type('Terceira Despesa');
      cy.get('#expenseValue').type('300.00');
      cy.get('#expenseCategory').select('Moradia');
      cy.get('#expenseType').select('recurring');
      cy.get('#expenseCycle').select('monthly');
      cy.get('#nextPayment').type(hoje);
      
      cy.get('#saveExpenseBtn').click();
      cy.get('.toast.success').should('be.visible');
      
      // Configurar permiss√£o de notifica√ß√£o
      cy.mockNotificationPermission('granted');
      
      // Simular notifica√ß√µes usando comando personalizado
      cy.mockNotificationPermission('granted');
      cy.task('addNotificationMock', {
        title: 'üí∞ Gerir.me - Pagamento Pr√≥ximo',
        body: 'Primeira Despesa vence hoje! Valor: R$ 100,00'
      });
      cy.task('addNotificationMock', {
        title: 'üí∞ Gerir.me - Pagamento Pr√≥ximo',
        body: 'Segunda Despesa vence amanh√£! Valor: R$ 200,00'
      });
      cy.task('addNotificationMock', {
        title: 'üí∞ Gerir.me - Pagamento Pr√≥ximo',
        body: 'Terceira Despesa vence hoje! Valor: R$ 300,00'
      });
      
      // Verificar se as notifica√ß√µes foram criadas
      cy.checkNotificationSent('üí∞ Gerir.me - Pagamento Pr√≥ximo', 'Primeira Despesa');
      cy.checkNotificationSent('üí∞ Gerir.me - Pagamento Pr√≥ximo', 'Segunda Despesa');
      cy.checkNotificationSent('üí∞ Gerir.me - Pagamento Pr√≥ximo', 'Terceira Despesa');
    });

    it('deve lidar com cen√°rio de muitas despesas vencendo simultaneamente', () => {
      const hoje = new Date().toISOString().split('T')[0];
      const despesas = [
        { nome: 'Aluguel', valor: '1200.00', categoria: 'Moradia' },
        { nome: 'Conta de Luz', valor: '150.00', categoria: 'Moradia' },
        { nome: 'Conta de √Ågua', valor: '80.00', categoria: 'Moradia' },
        { nome: 'Internet', valor: '89.90', categoria: 'Moradia' },
        { nome: 'Supermercado', valor: '400.00', categoria: 'Alimenta√ß√£o' }
      ];
      
      cy.get('[data-section="expenses"]').click();
      
      // Criar m√∫ltiplas despesas
      despesas.forEach((despesa, index) => {
        cy.get('#addExpenseBtn').click();
        
        cy.get('#expenseName').type(despesa.nome);
        cy.get('#expenseValue').type(despesa.valor);
        cy.get('#expenseCategory').select(despesa.categoria);
        cy.get('#expenseType').select('recurring');
        cy.get('#expenseCycle').select('monthly');
        cy.get('#nextPayment').type(hoje);
        
        cy.get('#saveExpenseBtn').click();
        cy.get('.toast.success').should('be.visible');
      });
      
      // Simular notifica√ß√µes usando comando personalizado
      cy.mockNotificationPermission('granted');
      
      despesas.forEach((despesa) => {
        cy.task('addNotificationMock', {
          title: 'üí∞ Gerir.me - Pagamento Pr√≥ximo',
          body: `${despesa.nome} vence hoje! Valor: R$ ${despesa.valor}`
        });
      });
      
      // Verificar se todas as notifica√ß√µes foram criadas
      despesas.forEach((despesa) => {
        cy.checkNotificationSent('üí∞ Gerir.me - Pagamento Pr√≥ximo', despesa.nome);
      });
    });
  });



  describe('Casos Extremos e Valida√ß√µes', () => {
    it('n√£o deve disparar notifica√ß√µes para despesas √∫nicas (n√£o recorrentes)', () => {
      const hoje = new Date().toISOString().split('T')[0];
      
      // Criar despesa √∫nica
      cy.get('[data-section="expenses"]').click();
      cy.get('#addExpenseBtn').click();
      
      cy.get('#expenseName').type('Despesa √önica');
      cy.get('#expenseValue').type('50.00');
      cy.get('#expenseCategory').select('Lazer');
      cy.get('#expenseType').select('unique');
      cy.get('#expenseDate').type(hoje);
      
      cy.get('#saveExpenseBtn').click();
      cy.get('.toast.success').should('be.visible');
      
      // Simular verifica√ß√£o de notifica√ß√µes usando comando personalizado
      cy.mockNotificationPermission('granted');
      cy.task('triggerNotificationCheck');
      
      // Verificar que nenhuma notifica√ß√£o foi enviada para despesas √∫nicas
      cy.checkNoNotificationSent('Despesa √önica');
    });

    it('deve lidar com despesas sem data de pr√≥ximo pagamento', () => {
      // Este teste verifica se o sistema n√£o quebra com dados inconsistentes
      cy.mockNotificationPermission('granted');
      cy.task('triggerNotificationCheck');
      
      // Verificar que o sistema n√£o quebra mesmo sem despesas v√°lidas
      cy.task('getAppState').then((state) => {
        expect(state.notificationErrors).to.be.undefined;
      });
      
      // Dashboard deve continuar funcionando
      cy.get('#dashboard-container').should('be.visible');
    });

    it('deve funcionar corretamente ap√≥s logout e login', () => {
      const hoje = new Date().toISOString().split('T')[0];
      
      // Criar despesa
      cy.get('[data-section="expenses"]').click();
      cy.get('#addExpenseBtn').click();
      
      cy.get('#expenseName').type('Despesa Persistente');
      cy.get('#expenseValue').type('75.00');
      cy.get('#expenseCategory').select('Outros');
      cy.get('#expenseType').select('recurring');
      cy.get('#expenseCycle').select('monthly');
      cy.get('#nextPayment').type(hoje);
      
      cy.get('#saveExpenseBtn').click();
      cy.get('.toast.success').should('be.visible');
      
      // Logout
      cy.get('#logoutBtn').click();
      
      // Login novamente
      cy.loginAsDefaultUser();
      
      // Verificar se notifica√ß√µes ainda funcionam ap√≥s login
      cy.mockNotificationPermission('granted');
      cy.task('addNotificationMock', {
        title: 'üí∞ Gerir.me - Pagamento Pr√≥ximo',
        body: 'Despesa Persistente vence hoje! Valor: R$ 75,00'
      });
      
      // Verificar se a notifica√ß√£o foi criada
      cy.checkNotificationSent('üí∞ Gerir.me - Pagamento Pr√≥ximo', 'Despesa Persistente');
    });
  });
});